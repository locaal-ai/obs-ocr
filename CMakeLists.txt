cmake_minimum_required(VERSION 3.16...3.26)

include("${CMAKE_CURRENT_SOURCE_DIR}/cmake/common/bootstrap.cmake" NO_POLICY_SCOPE)

project(${_name} VERSION ${_version})

option(ENABLE_FRONTEND_API "Use obs-frontend-api for UI functionality" ON)
option(ENABLE_QT "Use Qt functionality" ON)

include(compilerconfig)
include(defaults)
include(helpers)

add_library(${CMAKE_PROJECT_NAME} MODULE)

find_package(libobs REQUIRED)
target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE OBS::libobs)

if(ENABLE_FRONTEND_API)
  find_package(obs-frontend-api REQUIRED)
  target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE OBS::obs-frontend-api)
endif()

if(ENABLE_QT)
  find_qt(COMPONENTS Widgets Core)
  target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE Qt::Core Qt::Widgets)
  target_compile_options(
    ${CMAKE_PROJECT_NAME} PRIVATE $<$<C_COMPILER_ID:Clang,AppleClang>:-Wno-quoted-include-in-framework-header
                                  -Wno-comma>)
  set_target_properties(
    ${CMAKE_PROJECT_NAME}
    PROPERTIES AUTOMOC ON
               AUTOUIC ON
               AUTORCC ON)
endif()

set(USE_SYSTEM_OPENCV
    OFF
    CACHE STRING "Use system OpenCV")

set(BUILD_OPENCV_FROM_SOURCE
    OFF
    CACHE STRING "Build OpenCV from tarball")

if(OS_LINUX)
  if(USE_SYSTEM_OPENCV AND BUILD_OPENCV_FROM_SOURCE)
    message(FATAL_ERROR "Only one of USE_SYSTEM_OPENCV and BUILD_OPENCV_FROM_SOURCE can be enabled!")
  endif()
else()
  if(USE_SYSTEM_OPENCV)
    message(FATAL_ERROR "System OpenCV is only supported on Linux!")
  elseif(BUILD_OPENCV_FROM_SOURCE)
    message(FATAL_ERROR "Building OpenCV from source is only supported on Linux!")
  endif()
endif()

if(USE_SYSTEM_OPENCV)
  find_package(OpenCV REQUIRED COMPONENTS core imgproc)
  target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE "${OpenCV_LIBRARIES}")
  target_include_directories(${CMAKE_PROJECT_NAME} SYSTEM PUBLIC "${OpenCV_INCLUDE_DIRS}")
elseif(BUILD_OPENCV_FROM_SOURCE)
  include(cmake/BuildOpenCV.cmake)
  target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE OpenCV)
else()
  include(cmake/FetchOpenCV.cmake)
  target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE OpenCV)
endif()

set(BUILD_TESSERACT_FROM_SOURCE
    OFF
    CACHE STRING "Build Tessaract from tarball")
if(BUILD_TESSERACT_FROM_SOURCE)
  if(NOT OS_LINUX)
    message(FATAL_ERROR "Building Tesseract from source is only supported on Linux!")
  endif()
  include(cmake/BuildTesseract.cmake)
else()
  include(cmake/FetchTesseract.cmake)
endif()
target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE Tesseract)

include(cmake/BuildInja.cmake)
target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE inja)

target_sources(${CMAKE_PROJECT_NAME} PRIVATE src/plugin-main.c src/obs-utils.cpp src/tesseract-ocr-utils.cpp
                                             src/ocr-filter.cpp src/ocr-filter-info.c)

set_target_properties_plugin(${CMAKE_PROJECT_NAME} PROPERTIES OUTPUT_NAME ${_name})
